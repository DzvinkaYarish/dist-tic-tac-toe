# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tic_tac_toe_player_pb2 as tic__tac__toe__player__pb2


class TicTacToeGameMasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestTurn = channel.unary_unary(
                '/TicTacToeGameMaster/RequestTurn',
                request_serializer=tic__tac__toe__player__pb2.RequestTurnRequest.SerializeToString,
                response_deserializer=tic__tac__toe__player__pb2.RequestTurnResponse.FromString,
                )
        self.EndGame = channel.unary_unary(
                '/TicTacToeGameMaster/EndGame',
                request_serializer=tic__tac__toe__player__pb2.EndGameRequest.SerializeToString,
                response_deserializer=tic__tac__toe__player__pb2.EndGameResponse.FromString,
                )


class TicTacToeGameMasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TicTacToeGameMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestTurn,
                    request_deserializer=tic__tac__toe__player__pb2.RequestTurnRequest.FromString,
                    response_serializer=tic__tac__toe__player__pb2.RequestTurnResponse.SerializeToString,
            ),
            'EndGame': grpc.unary_unary_rpc_method_handler(
                    servicer.EndGame,
                    request_deserializer=tic__tac__toe__player__pb2.EndGameRequest.FromString,
                    response_serializer=tic__tac__toe__player__pb2.EndGameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TicTacToeGameMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TicTacToeGameMaster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToeGameMaster/RequestTurn',
            tic__tac__toe__player__pb2.RequestTurnRequest.SerializeToString,
            tic__tac__toe__player__pb2.RequestTurnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToeGameMaster/EndGame',
            tic__tac__toe__player__pb2.EndGameRequest.SerializeToString,
            tic__tac__toe__player__pb2.EndGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
